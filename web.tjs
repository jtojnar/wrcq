"use strict";

var express = require('express');
var path = require('path');
var fs = require('fs');
var url = require('url');

var parseString = require('xml2js').parseString;

var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var crypto = require('crypto');
var flash = require('connect-flash');
var sha1 = function(d) {
		return crypto.createHash('sha1').update(d).digest('hex');
	};

function increment(obj, alpha, beta) {
	if(!obj.hasOwnProperty(alpha)) {
		obj[alpha] = {};
	}
	if(!obj[alpha].hasOwnProperty(beta)) {
		obj[alpha][beta] = 0;
	}
	return ++obj[alpha][beta];
}

var _dbUri = process.env.HEROKU_POSTGRESQL_COPPER_URL;

passport.serializeUser(function(user, done) {
	done(null, user.id);
});
passport.deserializeUser(function(id, done) {
	pg.connect(_dbUri, function(err, client, pgdone) {
		if(err) {
			pgdone();
			return done(err, false);
		}

		await client.query('select * from "user" where "id"=$1', [id], defer(row, result));
		pgdone();
		if(result.rowCount == 0) {
			return done(err, false);
		}
		var user = result.rows[0];
		return done(err, user);
	});
});


// thisisdangerous
passport.use(new LocalStrategy(
	function(email, password, done) {
		process.nextTick(function () {
			pg.connect(_dbUri, function(err, client, pgdone) {
				if(err) {
					pgdone();
					return done(err);
				}

				await client.query('select * from "user" where "email"=$1', [email], defer(row, result));
				pgdone();
				if(result.rowCount == 0) {
					return done(null, false, {message: 'Unknown user ' + email});
				}
				var user = result.rows[0];
				if(user.password != sha1(password+user.salt)) {
					return done(null, false, {message: 'Invalid password'});
				}
				return done(null, user);
			});
		});
	}
));

var hbs = require('hbs');
hbs.registerHelper('date', function(date) {
	return moment(date).format('L');
});

var blocks = {};

hbs.registerHelper('extend', function(name, context) {
	var block = blocks[name];
	if(!block) {
		block = blocks[name] = [];
	}

	block.push(context.fn(this));
});

hbs.registerHelper('block', function(name) {
	var val = (blocks[name] || []).join('\n');

	// clear the block
	blocks[name] = [];
	return val;
});

hbs.registerHelper('title', function(value, context) {
	blocks.title = [value];
	return value;
});

hbs.registerHelper('index', function(index, context) {
	return index+1;
});

var genderclass = {
	'men': 'M',
	'women': 'W',
	'mixed': 'X'
};
hbs.registerHelper('genderclass', function(gender, context) {
	return typeof genderclass[gender] === 'undefined' ? '' : genderclass[gender];
});

var ageclass = {
	'under20': '20',
	'under23': '23',
	'junior': 'J',
	'open': 'O',
	'veteran': 'V',
	'superveteran': 'SV',
	'ultraveteran': 'UV'
};
hbs.registerHelper('ageclass', function(age, context) {
	return typeof ageclass[age] === 'undefined' ? '' : ageclass[age];
});

hbs.registerHelper('each', function(context, options) {
	var fn = options.fn, inverse = options.inverse;
	var i = 0, ret = "", data;

	if(options.data) {
		data = hbs.handlebars.createFrame(options.data);
	}

	if(context && typeof context === 'object') {
		if(context instanceof Array) {
			for(var j = context.length; i<j; i++) {
				if(data) {data.index = i;}
				if(i === (j-1)) {
					data.last = true;
				} else {
					data.last = false;
				}
				ret = ret + fn(context[i], {data: data});
			}
		} else {
			var j = context.length;
			for(var key in context) {
				if(context.hasOwnProperty(key)) {
					if(data) {data.key = key;}
					if(i === (j-1)) {
						data.last = true;
					} else {
						data.last = false;
					}
					ret = ret + fn(context[key], {data: data});
					i++;
				}
			}
		}
	}

	if(i === 0) {
		ret = inverse(this);
	}

	return ret;
});

hbs.registerHelper('equals', function(primary, secondary, options) {
	if(primary === secondary) {
		return options.fn(this);
	} else {
		return options.inverse(this);
	}
});

hbs.registerPartials(path.join(__dirname, 'view', 'partial'));

var pg = require('pg');
var moment = require('moment');

var publicDir = path.join(__dirname, 'public');

var app = express();


app.configure(function() {
	app.set('views', path.join(__dirname, 'view'));
	app.set('port', process.env.PORT || 5000);
	app.set('view engine', 'hbs');


	app.use(express.cookieParser());
	app.use(express.bodyParser());
	app.use(express.methodOverride());
	app.use(express.session({secret: 'too much to bear'}));
	app.use(flash());
	app.use(passport.initialize());
	app.use(passport.session());

	app.use(express.compress());
	app.use(express.favicon());
	app.use(express.static(publicDir));
});

app.configure('development', function() {
	app.use(express.logger());
});


app.get('/', function(req, res) {
	pg.connect(_dbUri, function(err, client, done) {
		await client.query('select * from update order by timestamp desc limit 10', defer(var row, updates));
		await client.query('select * from event order by start asc', defer(var row, events));
		done();
		res.render('index', {updates: updates.rows, events: events.rows, identity: req.user});
	});
});

app.get('/events', function(req, res) {
	res.render('events', {identity: req.user});
});

function addMembers(members, row) {
	row.members = [];
	// var mcache = [];
	for(var i = 0; i < members.length; i++) {
		if(members[i].team_id == row.id) {
			row.members.push(members[i]);
			// mcache.push(i);
		}
	};
	// for(var i = mcache.length - 1; i >= 0; i--) {
	// 	members.splice(mcache[i], 1);
	// };
	// mcache = [];
}

// var categories = {MO: {age: 'open', gender: 'men'}, XO: {age: 'open', gender: 'mixed'}, WO: {age: 'open', gender: 'women'}, MV: {age: 'veteran', gender: 'men'}, XV: {age: 'veteran', gender: 'mixed'}, WV: {age: 'veteran', gender: 'women'}, MSV: {age: 'superveteran', gender: 'men'}, XSV: {age: 'superveteran', gender: 'mixed'}, WSV: {age: 'superveteran', gender: 'women'}, MUV: {age: 'ultraveteran', gender: 'men'}, XUV: {age: 'ultraveteran', gender: 'mixed'}, WUV: {age: 'ultraveteran', gender: 'women'}, MJ: {age: 'junior', gender: 'men'}, XJ: {age: 'junior', gender: 'mixed'}, WJ: {age: 'junior', gender: 'women'}, M20: {age: 'under20', gender: 'men'}, X20: {age: 'under20', gender: 'mixed'}, W20: {age: 'under20', gender: 'women'}, M23: {age: 'under23', gender: 'men'}, X23: {age: 'under23', gender: 'mixed'}, W23: {age: 'under23', gender: 'women'}};

app.get('/events/:event/results', function(req, res) {
	pg.connect(_dbUri, function(err, client, done) {
		await client.query('select * from event where slug=$1 limit 1', [req.params.event], defer(var row, eventdata));
		if(eventdata.rows.length == 0) {
			done();
			res.status(404);
			res.render('error/404', {body: 'Sorry, this event is not in our database, we may be working on it.'});
			return;
		}
		var event = eventdata.rows[0];

		await client.query('select * from member where event_id=$1', [event.id], defer(var row, members));
		members = members.rows;
		var moquery = client.query('select * from team where event_id=$1 and gender=$2 and age=$3 order by status=\'finished\' desc, score desc, time asc limit 3', [event.id, 'men', 'open'], function() {});
		moquery.on('row', function(row) {addMembers(members, row);});
		await moquery.on('end', defer(var mo));
		var xoquery = client.query('select * from team where event_id=$1 and gender=$2 and age=$3 order by status=\'finished\' desc, score desc, time asc limit 3', [event.id, 'mixed', 'open'], function() {});
		xoquery.on('row', function(row) {addMembers(members, row);});
		await xoquery.on('end', defer(var xo));
		var woquery = client.query('select * from team where event_id=$1 and gender=$2 and age=$3 order by status=\'finished\' desc, score desc, time asc limit 3', [event.id, 'women', 'open'], function() {});
		woquery.on('row', function(row) {addMembers(members, row);});
		await woquery.on('end', defer(var wo));
		
		var counters = {};
		var durations = [];
		var categories = [];

		var teamquery = client.query('select * from team where event_id=$1 order by status=\'finished\' desc, score desc, time asc', [event.id]);
		teamquery.on('row', function(row) {addMembers(members, row);});
		teamquery.on('row', function(row, result) {
			var gender = hbs.handlebars.helpers.genderclass(row.gender);
			var age = hbs.handlebars.helpers.ageclass(row.age);
			row.category = gender+age;

			if(durations.indexOf(row.duration) < 0) {
				durations.push(row.duration);
			}
			if(categories.indexOf(row.category) < 0) {
				categories.push(row.category);
			}
			
			if(row.age == 'ultraveteran') {
				row[gender+'UV'] = increment(counters, row.duration, gender+'UV');
				row[gender+'SV'] = increment(counters, row.duration, gender+'SV');
				row[gender+'V'] = increment(counters, row.duration, gender+'V');
				row[gender+'O'] = increment(counters, row.duration, gender+'O');
			} else if(row.age == 'superveteran') {
				row[gender+'SV'] = increment(counters, row.duration, gender+'SV');
				row[gender+'V'] = increment(counters, row.duration, gender+'V');
				row[gender+'O'] = increment(counters, row.duration, gender+'O');
			} else if(row.age == 'veteran') {
				row[gender+'V'] = increment(counters, row.duration, gender+'V');
				row[gender+'O'] = increment(counters, row.duration, gender+'O');
			} else if(row.age == 'open') {
				row[gender+'O'] = increment(counters, row.duration, gender+'O');
			} else if(row.age == 'junior') {
				row[gender+'J'] = increment(counters, row.duration, gender+'J');
			} else if(row.age == 'under23') {
				row[gender+'23'] = increment(counters, row.duration, gender+'23');
			} else if(row.age == 'under20') {
				row[gender+'20'] = increment(counters, row.duration, gender+'20');
			}
			row['place'] = increment(counters, row.duration, 'all');

			if(!req.query.category || req.query.category === row.category) {
				result.addRow(row);
			}
		});
		await teamquery.on('end', defer(var teams));
		done();

		var activeCategory = null;
		var activeDuration = null;
		var maxDuration = Math.max.apply(null, durations);
		var invalidCategory = (req.query.hasOwnProperty('category') && categories.indexOf(req.query.category) < 0);
		var invalidDuration = (req.query.hasOwnProperty('duration') && durations.indexOf(parseInt(req.query.duration)) < 0);
		var defaultCategory = (req.query.hasOwnProperty('category') && req.query.category === '');
		var defaultDuration = (req.query.hasOwnProperty('duration') && parseInt(req.query.duration) === maxDuration);

		var query = {};
		if(defaultCategory || defaultDuration) {
			if(!defaultDuration) {
				query.duration = req.query.duration;
			}
			if(!defaultCategory) {
				query.category = req.query.category;
			}
			res.redirect(url.format({pathname: req._parsedUrl.pathname, query: query}));
			return;
		}
		if(invalidDuration || invalidCategory) {
			res.status(404);
			res.render('error/404');
			return;
		}

		var activeDuration = req.query.hasOwnProperty('duration') ? parseInt(req.query.duration) : maxDuration;
		res.render('results', {
			title: 'Results of ' + event.name,
			event: event,
			teams: teams.rows,
			mo: {teams: mo.rows},
			xo: {teams: xo.rows},
			wo: {teams: wo.rows},
			identity: req.user,
			isMO: counters[activeDuration].MO, isXO: counters[activeDuration].XO, isWO: counters[activeDuration].WO, isMV: counters[activeDuration].MV, isXV: counters[activeDuration].XV, isWV: counters[activeDuration].WV, isMSV: counters[activeDuration].MSV, isXSV: counters[activeDuration].XSV, isWSV: counters[activeDuration].WSV, isMUV: counters[activeDuration].MUV, isXUV: counters[activeDuration].XUV, isWUV: counters[activeDuration].WUV, isMJ: counters[activeDuration].MJ, isXJ: counters[activeDuration].XJ, isWJ: counters[activeDuration].WJ, isM20: counters[activeDuration].M20, isX20: counters[activeDuration].X20, isW20: counters[activeDuration].W20, isM23: counters[activeDuration].M23, isX23: counters[activeDuration].X23, isW23: counters[activeDuration].W23,
			activeCategory: req.query.hasOwnProperty('category') ? req.query.category : null,
			categories: categories,
			activeDuration: activeDuration,
			durations: durations.length > 1 ? durations : null
		});
	});
});

app.get('/login', function(req, res) {
	res.render('login', {identity: req.user, message: req.flash('error')});
});

app.post('/login', passport.authenticate('local', {failureRedirect: '/login', failureFlash: true}), function(req, res) {
	res.redirect('/');
});

app.get('/logout', function(req, res) {
	req.logout();
	res.redirect('/');
});

app.listen(app.get('port'), function() {
	console.log('Started app on port %d', app.get('port'));
});